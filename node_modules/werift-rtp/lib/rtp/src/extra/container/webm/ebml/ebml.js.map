{"version":3,"file":"ebml.js","sourceRoot":"","sources":["../../../../../../../src/extra/container/webm/ebml/ebml.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  float32bit,\n  numberToByteArray,\n  stringToByteArray,\n} from \"./typedArrayUtils\";\n\nexport interface EBMLData {\n  write(buf: Uint8Array, pos: number): number;\n  countSize(): number;\n}\n\nexport class Value implements EBMLData {\n  constructor(public bytes: Uint8Array) {}\n\n  public write(buf: Uint8Array, pos: number): number {\n    buf.set(this.bytes, pos);\n    return pos + this.bytes.length;\n  }\n\n  public countSize(): number {\n    return this.bytes.length;\n  }\n}\n\nexport class Element implements EBMLData {\n  private readonly size: number;\n  private readonly sizeMetaData: Uint8Array;\n\n  constructor(\n    private id: Uint8Array,\n    private children: EBMLData[],\n    isSizeUnknown: boolean,\n  ) {\n    const bodySize = this.children.reduce((p, c) => p + c.countSize(), 0);\n    this.sizeMetaData = isSizeUnknown\n      ? UNKNOWN_SIZE\n      : vintEncode(numberToByteArray(bodySize, getEBMLByteLength(bodySize)));\n    this.size = this.id.length + this.sizeMetaData.length + bodySize;\n  }\n\n  public write(buf: Uint8Array, pos: number): number {\n    buf.set(this.id, pos);\n    buf.set(this.sizeMetaData, pos + this.id.length);\n    return this.children.reduce(\n      (p, c) => c.write(buf, p),\n      pos + this.id.length + this.sizeMetaData.length,\n    );\n  }\n\n  public countSize(): number {\n    return this.size;\n  }\n}\n\nexport const bytes = (data: Uint8Array): Value => {\n  return new Value(data);\n};\n\nexport const number = (num: number): Value => {\n  return bytes(numberToByteArray(num));\n};\n\nexport const float = (num: number): Value => bytes(float32bit(num));\n\nexport const vintEncodedNumber = (num: number): Value => {\n  return bytes(vintEncode(numberToByteArray(num, getEBMLByteLength(num))));\n};\n\n/**\n * Decode a vint-encoded unsigned integer previously produced by `vintEncodedNumber`.\n * Returns its numeric value (number if within MAX_SAFE_INTEGER, otherwise bigint) and the length in bytes.\n * Throws if the value is the EBML unknown-size sentinel.\n */\nexport const decodeVintEncodedNumber = (\n  buf: Uint8Array,\n  offset = 0,\n): { value: number | bigint; length: number } => {\n  const { value, length, unknown } = vintDecode(buf, offset);\n  if (unknown || value === undefined) {\n    throw new Error(\"decodeVintEncodedNumber: value is unknown size sentinel\");\n  }\n  return { value, length };\n};\n\nexport const string = (str: string): Value => {\n  return bytes(stringToByteArray(str));\n};\n\nexport const element = (\n  id: Uint8Array,\n  child: EBMLData | EBMLData[],\n): EBMLData => {\n  return new Element(id, Array.isArray(child) ? child : [child], false);\n};\n\nexport const unknownSizeElement = (\n  id: Uint8Array,\n  child: EBMLData | EBMLData[],\n): EBMLData => {\n  return new Element(id, Array.isArray(child) ? child : [child], true);\n};\n\nexport const build = (v: EBMLData): Uint8Array => {\n  const b = new Uint8Array(v.countSize());\n  v.write(b, 0);\n  return b;\n};\n\nexport const getEBMLByteLength = (num: number | bigint): number => {\n  if (num < 0x7f) {\n    return 1;\n  } else if (num < 0x3fff) {\n    return 2;\n  } else if (num < 0x1fffff) {\n    return 3;\n  } else if (num < 0xfffffff) {\n    return 4;\n  } else if (num < 0x7ffffffff) {\n    return 5;\n  } else if (num < 0x3ffffffffff) {\n    return 6;\n  } else if (num < 0x1ffffffffffff) {\n    return 7;\n  } else if (num < 0x20000000000000n) {\n    return 8;\n  } else if (num < 0xffffffffffffffn) {\n    throw new Error(\n      \"EBMLgetEBMLByteLength: number exceeds Number.MAX_SAFE_INTEGER\",\n    );\n  } else {\n    throw new Error(\n      \"EBMLgetEBMLByteLength: data size must be less than or equal to \" +\n        (2 ** 56 - 2),\n    );\n  }\n};\n\nexport const UNKNOWN_SIZE = new Uint8Array([\n  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n]);\n\nexport const vintEncode = (byteArray: Uint8Array): Uint8Array => {\n  byteArray[0] = getSizeMask(byteArray.length) | byteArray[0];\n  return byteArray;\n};\n\nexport const getSizeMask = (byteLength: number): number => {\n  return 0x80 >> (byteLength - 1);\n};\n\nexport interface VIntDecodeResult {\n  /** The decoded value. Undefined if the VINT represents an unknown size sentinel (all value bits = 1). */\n  value: number | bigint | undefined;\n  /** Total number of bytes consumed by this VINT. */\n  length: number;\n  /** True when this VINT encodes the EBML \"unknown size\" value (all value bits set to 1). */\n  unknown: boolean;\n}\n\n/**\n * Decode an EBML variable size integer (VINT) from the provided buffer.\n *\n * Encoding recap (EBML spec):\n *   The length (N, 1..8) is indicated by the position of the first set bit in the first byte.\n *   Patterns:\n *     1xxxxxxx -> 1 byte total  (7 value bits)\n *     01xxxxxx xxxxxxxx -> 2 bytes total (14 value bits)\n *     001xxxxx ...... -> 3 bytes total (21 value bits)\n *     ...\n *     00000001 [7 subsequent bytes] -> 8 bytes total (56 value bits)\n *\n * The marker bit itself is cleared from the first byte to recover the value bits.\n * Total value bits = 7 * N.\n * A value with all value bits set to 1 is reserved for the \"unknown size\" sentinel.\n */\nexport const vintDecode = (buf: Uint8Array, offset = 0): VIntDecodeResult => {\n  if (offset >= buf.length) {\n    throw new Error(\"vintDecode: offset out of range\");\n  }\n  const first = buf[offset];\n  if (first === 0) {\n    throw new Error(\"vintDecode: invalid first byte 0x00 (no leading 1 bit)\");\n  }\n\n  // Determine length by locating first set bit (MSB towards LSB)\n  let length = 0;\n  for (let i = 0; i < 8; i++) {\n    const mask = 0x80 >> i;\n    if (first & mask) {\n      length = i + 1; // Length is position index + 1\n      break;\n    }\n  }\n  if (length === 0) {\n    throw new Error(\"vintDecode: could not determine length\");\n  }\n  if (offset + length > buf.length) {\n    throw new Error(\"vintDecode: insufficient bytes for declared length\");\n  }\n\n  // Mask out the length marker bit(s) in the first byte\n  const lengthMarker = getSizeMask(length);\n  let valueBig = BigInt(first & ~lengthMarker);\n\n  for (let i = 1; i < length; i++) {\n    valueBig = (valueBig << 8n) | BigInt(buf[offset + i]);\n  }\n\n  // Maximum value (all value bits = 1) indicates unknown size\n  const allOnes = (1n << BigInt(7 * length)) - 1n; // 7 value bits per byte\n  const unknown = valueBig === allOnes;\n\n  let value: number | bigint | undefined;\n  if (unknown) {\n    value = undefined;\n  } else if (valueBig <= BigInt(Number.MAX_SAFE_INTEGER)) {\n    value = Number(valueBig);\n  } else {\n    value = valueBig; // preserve precision as bigint\n  }\n\n  return { value, length, unknown };\n};\n"]}