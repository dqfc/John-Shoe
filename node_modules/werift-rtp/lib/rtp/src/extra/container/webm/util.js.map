{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../src/extra/container/webm/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitStream, BitWriter2, BufferChain } from \"../../../imports/common.js\";\nimport * as EBML from \"./ebml/ebml.js\";\nimport { decodeVintEncodedNumber } from \"./ebml/ebml.js\";\n\nexport function serializeSimpleBlock(\n  frame: Buffer,\n  isKeyframe: boolean,\n  trackNumber: number,\n  relativeTimestamp: number,\n) {\n  const elementId = Buffer.from([0xa3]);\n\n  const contentSize: Uint8Array = EBML.vintEncodedNumber(\n    1 + 2 + 1 + frame.length,\n  ).bytes;\n\n  const keyframe = isKeyframe ? 1 : 0;\n  const flags = new BitWriter2(8)\n    .set(keyframe)\n    .set(0, 3)\n    .set(0)\n    .set(0, 2)\n    .set(0);\n\n  const simpleBlock = Buffer.concat([\n    elementId,\n    contentSize,\n    EBML.vintEncodedNumber(trackNumber).bytes,\n    new BufferChain(2).writeInt16BE(relativeTimestamp).buffer,\n    new BufferChain(1).writeUInt8(flags.value).buffer,\n    frame,\n  ]);\n  return simpleBlock;\n}\n\nexport interface SimpleBlock {\n  data: Buffer;\n  trackNumber: number;\n  isKeyframe: boolean;\n  timecode: number;\n}\n\nexport function deserializeSimpleBlocks(data: Buffer) {\n  const frames: SimpleBlock[] = [];\n  let position = 0;\n  while (position < data.length) {\n    // Element ID (SimpleBlock = 0xA3)\n    const elementId = data[position];\n    if (elementId !== 0xa3) {\n      throw new Error(`unexpected element id 0x${elementId.toString(16)}`);\n    }\n    position += 1;\n\n    // Content size VINT\n    const { value: contentSize, length: contentSizeLength } =\n      decodeVintEncodedNumber(data, position);\n    position += contentSizeLength;\n\n    // Track number VINT (we don't actually need the value here but must know its length)\n    const { value: trackNumber, length: trackNumberLength } =\n      decodeVintEncodedNumber(data, position);\n    position += trackNumberLength;\n\n    // Timecode (signed int16)\n    const timecode = data.readInt16BE(position);\n    position += 2;\n    // Flags (1 byte)\n    const flags = new BitStream(data.subarray(position, position + 1));\n    const isKeyframe = (flags.readBits(1) as number) === 1;\n\n    position += 1;\n\n    const metaSize = trackNumberLength + 2 + 1; // track + timecode + flags\n    const remaining = Number(contentSize) - metaSize;\n    if (remaining < 0) {\n      throw new Error(\"invalid simple block size\");\n    }\n    const frame = data.subarray(position, position + remaining);\n    frames.push({\n      data: frame,\n      trackNumber: Number(trackNumber),\n      isKeyframe,\n      timecode,\n    });\n    position += remaining;\n  }\n  return frames;\n}\n"]}